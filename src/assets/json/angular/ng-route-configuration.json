{
    "_id": {
        "$oid": "61ffd8a765787a8c50f4f992"
    },
    "article_id": "3.1",
    "article_slug": "ng-route-configuration",
    "article_title": "Angular - Route Configuration",
    "article_image": "",
    "article_seo_image": "https://stackmi-storage.s3.ap-south-1.amazonaws.com/academy-imgs/Angular/Angular-seo-route-config.png",
    "enroll_available": true,
    "article_content": [
        {
            "content_title": "",
            "content_desc": "<div class=\"paragraph\">\n<p>Download the complete project from github: <a href=\"https://github.com/faroooq/shopping-cart\" target=\"_blank\">https://github.com/faroooq/shopping-cart</a></p>\n<hr/>\n</div>",
            "content_image": "",
            "content_code": ""
        },
        {
            "content_title": "",
            "content_desc": "<p><strong>Definition:</strong> If user wants to navigate from one page to another page we use routing in Angular. To handle the navigation from one view to the next, we use Angular Router. <em>The Router enables navigation by interpreting a browser URL as an instruction to change the view.</em></p>\n<p>Our goal with routing is to&nbsp;have the&nbsp;<code>HomeComponent</code> rendered when the <abbr>URL</abbr>&nbsp;is&nbsp;<code>/</code>&nbsp;and&nbsp;the&nbsp;<code>ItemListComponent</code>&nbsp;shown when the&nbsp;<abbr>URL</abbr>&nbsp;is&nbsp;<code>/gadgets</code></p>\n<p>The&nbsp;mapping of&nbsp;<abbr>URL</abbr>s to&nbsp;<em>Components </em>that we want to be displayed on the page is done via something called a <em>Route Configuration</em>, at it&rsquo;s core it&rsquo;s just an array which we can define like:</p>",
            "content_image": "",
            "content_code": "const routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'gadgets', component: ItemListComponent }\n ];"
        },
        {
            "content_title": "",
            "content_desc": "<ul>\n<li>\n<p>The&nbsp;<code>path</code>&nbsp;property describes the&nbsp;<abbr>URL</abbr>&nbsp;this route will handle.</p>\n</li>\n<li>\n<p>The&nbsp;<code>component</code>&nbsp;property is the&nbsp;name of&nbsp;the component we want to&nbsp;display when the&nbsp;<abbr>URL</abbr> in the browser matches this path.</p>\n</li>\n</ul>\n<p>We then&nbsp;<em>install</em> these routes into our application by importing<code> RouterModule.forRoot(routes)</code>&nbsp;into our&nbsp;<code>NgModule</code>, like:</p>",
            "content_image": "",
            "content_code": "@NgModule({\n  imports: [\n    RouterModule.forRoot(routes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\nexport class AppRoutingModule { }"
        },
        {
            "content_title": "RouterOutlet Directive",
            "content_desc": "<div class=\"paragraph\">\n<p>We&rsquo;ve configured our application so if the&nbsp;user navigates to&nbsp;<code>/gadgets</code> we want the <code>ItemListComponent</code>&nbsp;shown or&nbsp;if they navigate to&nbsp;the root&nbsp;<abbr>URL</abbr> <code>/</code> then we want the<code> HomeComponent</code>&nbsp;shown.</p>\n</div>\n<div class=\"paragraph\">\n<p><em>But where exactly do we want the&nbsp;component shown?</em></p>\n</div>\n<div class=\"paragraph\">\n<p>We need to&nbsp;add a&nbsp;directive called&nbsp;<code>router-outlet</code>&nbsp;somewhere in&nbsp;our template&nbsp;<abbr>HTML</abbr>. This directive tells Angular&nbsp;<em>where</em>&nbsp;it should insert each of&nbsp;those components in&nbsp;the route, we&rsquo;ll add ours to&nbsp;the&nbsp;<code>AppComponent</code>, like:</p>\n</div>",
            "content_image": "",
            "content_code": "<!-- app.component.html -->\n\n<app-navbar></app-navbar>\n<!-- Routes -->\n<router-outlet></router-outlet>"
        },
        {
            "content_title": "",
            "content_desc": "<p>We place&nbsp;<code>&lt;router-outlet&gt;</code> where we want the component to be inserted.</p>\n<p>Now if we run the&nbsp;application and&nbsp;visit the&nbsp;root&nbsp;<abbr>URL</abbr> we show the<code> HomeComponent</code>&nbsp;and&nbsp;if we visit the&nbsp;<code>/gadgets</code>&nbsp;<abbr>URL</abbr> we shown the <code>ItemListComponent</code>.</p>",
            "content_image": "",
            "content_code": ""
        },
        {
            "content_title": "Redirects",
            "content_desc": "<p>There are a few more ways to configure our routes, for example we might like to change our routes to add some redirects like:</p>",
            "content_image": "",
            "content_code": "const routes:Routes = [\n\t{path: '', redirectTo: 'home', pathMatch: 'full'},\n\t{path: 'home', component: HomeComponent},\n\t{path: 'gadgets', component: ItemListComponent}\n];"
        },
        {
            "content_title": "",
            "content_desc": "<p>The&nbsp;<code>redirectTo</code>&nbsp;property describes the&nbsp;path we want to&nbsp;redirect this user to&nbsp;if they navigate to&nbsp;this&nbsp;<abbr>URL</abbr>.</p>\n<p>Now if the&nbsp;user visits the&nbsp;root (empty)&nbsp;<abbr>URL</abbr> they are redirected to<code> /home</code>&nbsp;instead.</p>\n<p><strong>Note:</strong> For the special case of an <em>empty</em>&nbsp;<abbr>URL</abbr> we also need to add the&nbsp;<code>pathMatch: 'full'</code> property so Angular knows it should be matching exactly the empty string and not&nbsp;<em>partially</em>&nbsp;the&nbsp;empty string.</p>",
            "content_image": "",
            "content_code": ""
        },
        {
            "content_title": "Catch-All Route",
            "content_desc": "<p>We can also add a&nbsp;<em>catch-all</em>&nbsp;route by&nbsp;using the&nbsp;path&nbsp;<code>**</code>, if the&nbsp;<abbr>URL</abbr> doesn&rsquo;t match <em>any</em>&nbsp;of&nbsp;the other routes it will match this route.</p>",
            "content_image": "",
            "content_code": "const routes:Routes = [\n  {path: '', redirectTo: 'home', pathMatch: 'full'},\n  {path: 'home', component: HomeComponent},\n  {path: 'gadgets', component: ItemListComponent},\n  {path: '**', component: ErrorComponent}\n];"
        },
        {
            "content_title": "",
            "content_desc": "<p>If nothing matches we redirect the user to the <code>ErrorComponent </code>with some proper content like, Requested Page doesn't exist..</p>",
            "content_image": "",
            "content_code": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ErrorComponent } from './error/error.component';\nimport { HomeComponent } from './home/home.component';\nimport { ItemListComponent } from './item-list/item-list.component';\n\n// app.routing.module.ts file\nconst routes: Routes = [\n  {\n    path: 'home', component: HomeComponent\n  },\n  {\n    path: 'gadgets', component: ItemListComponent,\n  },\n  {\n    path: '**', component: ErrorComponent\n  }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\nexport class AppRoutingModule { }\n"
        }
    ]
}