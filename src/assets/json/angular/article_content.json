{
    "_id": {
        "$oid": "6203e20e65787a8c50f4f9d2"
    },
    "article_id": "6.3",
    "article_slug": "ng-custom-pipes",
    "article_title": "Angular - Custom Pipes",
    "article_image": "",
    "article_seo_desc": "Creating a pipe is very simple in Angular. We just decorate a class with the @Pipe decorator, provide a name and a transform function and we are done.",
    "enroll_available": true,
    "article_content": [
        {
            "content_title": "",
            "content_desc": "<div class=\"paragraph\">\n<p>Download the complete project from github: <a href=\"https://github.com/faroooq/shopping-cart\" target=\"_blank\">https://github.com/faroooq/shopping-cart</a></p>\n<hr/>\n</div>",
            "content_image": "",
            "content_code": ""
        },
        {
            "content_title": "Pipe Decorator",
            "content_desc": "<div class=\"paragraph\">\n<p>One pipe I&nbsp;really find useful when building web applications is a&nbsp;<em>default</em> pipe, which I use for things like avatar images.</p>\n</div>\n<div class=\"paragraph\">\n<p>I use this pipe in an image field, like:</p>\n</div>",
            "content_image": "",
            "content_code": "<img [src]=\"imageUrl | default:'<default-image-url>'\"/>"
        },
        {
            "content_title": "",
            "content_desc": "<div class=\"paragraph\">\n<p>The&nbsp;pipe is called&nbsp;<code>default</code> and we pass to it a default image to use if the&nbsp;<code>imageUrl</code>&nbsp;variable is blank.</p>\n</div>\n<div class=\"paragraph\">\n<p>To&nbsp;create a&nbsp;pipe we use the&nbsp;<code>@Pipe</code> decorator and annotate a class like:</p>\n</div>",
            "content_image": "",
            "content_code": "import { Pipe } from '@angular/core';\n.\n.\n.\n@Pipe({\n  name:\"default\"\n})\nclass DefaultPipe { }"
        },
        {
            "content_title": "",
            "content_desc": "<p>The&nbsp;name parameter for&nbsp;the&nbsp;<code>Pipe</code> decorator is how the pipe will be called in templates.</p>",
            "content_image": "",
            "content_code": ""
        },
        {
            "content_title": "Transform Function",
            "content_desc": "<p>The&nbsp;actual logic for&nbsp;the pipe is put in&nbsp;a function called&nbsp;<code>transform</code> on the class, like:</p>",
            "content_image": "",
            "content_code": "class DefaultPipe {\n  transform(value: string, fallback: string): string {\n    let image = \"\";\n    if (value) {\n      image = value;\n    } else {\n      image = fallback;\n    }\n     return image;\n  }\n}"
        },
        {
            "content_title": "",
            "content_desc": "<div class=\"paragraph\">\n<p>The&nbsp;first argument to&nbsp;the transform function is the&nbsp;<em>value</em> that is passed <em>into</em>&nbsp;the&nbsp;pipe, i.e. the&nbsp;thing that goes&nbsp;<em>before</em>&nbsp;the&nbsp;<code>|</code>&nbsp;in&nbsp;the expression.</p>\n</div>\n<div class=\"paragraph\">\n<p>The second parameter to the transform function is the first param we pass into our pipe, i.e. the thing that goes after the <code>:</code>&nbsp;in&nbsp;the expression.</p>\n</div>\n<div class=\"paragraph\">\n<p>Specifically with this example:</p>\n</div>",
            "content_image": "",
            "content_code": "@Component({\n  selector: 'app',\n  template: `\n  <img [src]=\"imageUrl | default:'http://s3.amazonaws.com/uifaces/faces/twitter/sillyleo/128.jpg'\"/>\n `\n})\nclass AppComponent {\n  imageUrl: string = \"\";\n}"
        },
        {
            "content_title": "",
            "content_desc": "<ul>\n<li>\n<p><code>value</code>&nbsp;gets passed&nbsp;<code>imageUrl</code>&nbsp;which is blank.</p>\n</li>\n<li>\n<p><code>fallback</code> gets passed 'http://s3.amazonaws.com/uifaces/faces/twitter/sillyleo/128.jpg'</p>\n</li>\n</ul>\n<p>When we run the&nbsp;above, since&nbsp;<code>imageUrl</code>&nbsp;is blank the&nbsp;<code>default</code> pipe uses the default image which is passed in.</p>",
            "content_image": "",
            "content_code": ""
        },
        {
            "content_title": "Multiple Parameters",
            "content_desc": "<div class=\"paragraph\">\n<p>Finally, we want to&nbsp;support an&nbsp;<em>optional</em> third parameter to our pipe called&nbsp;<code>forceHttps</code>, if the&nbsp;image selected doesn&rsquo;t use&nbsp;<em><abbr>HTTPS</abbr></em> the pipe will convert the&nbsp;<abbr>URL</abbr>&nbsp;to&nbsp;one that does use&nbsp;<em><abbr>HTTPS</abbr></em>.</p>\n</div>\n<div class=\"paragraph\">\n<p>To support additional parameters in pipes we just add more parameters to our <em>transform</em>&nbsp;function.</p>\n</div>\n<div class=\"paragraph\">\n<p>Because this one is optional and we are using TypeScript we can define the new param and also give it a default value of <code>false</code>.</p>\n</div>",
            "content_image": "",
            "content_code": "class DefaultPipe {\n  transform(value: string, fallback: string, forceHttps: boolean = false): string {\n    let image = \"\";\n    if (value) {\n      image = value;\n    } else {\n      image = fallback;\n    }\n    if (forceHttps) {\n      if (image.indexOf(\"https\") == -1) {\n        image = image.replace(\"http\", \"https\");\n      }\n    }\n    return image;\n  }\n}"
        },
        {
            "content_title": "",
            "content_desc": "<p>And&nbsp;to use this optional param we just extend the&nbsp;pipe syntax in&nbsp;our template with another&nbsp;<code>:</code>, like:</p>",
            "content_image": "",
            "content_code": "<img [src]=\"imageUrl | default:'http://s3.amazonaws.com/uifaces/faces/twitter/sillyleo/128.jpg':true\"/> "
        },
        {
            "content_title": "",
            "content_desc": "<ul>\n<li>Notice the&nbsp;last&nbsp;<code>:true</code>&nbsp;at&nbsp;the end of&nbsp;the pipe expression.</li>\n</ul>\n<p>Now we force the&nbsp;image&nbsp;<abbr>URL</abbr>&nbsp;to&nbsp;use the&nbsp;<abbr>HTTPS</abbr>&nbsp;protocol.</p>",
            "content_image": "",
            "content_code": ""
        }
    ]
}